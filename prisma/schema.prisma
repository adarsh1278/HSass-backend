generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  SUPERADMIN
  ADMIN
  DOCTOR
  NURSE
  STAFF
  LAB_TECH
  PHARMACIST
  RECEPTIONIST
  ACCOUNTANT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum ChargeModule {
  OPD
  IPD
  LAB
  PHARMACY
  RADIOLOGY
  SURGERY
  CONSULTATION
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
  OVERDUE
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
  INSURANCE
  OTHER
}

// SUPERADMIN
model SuperAdmin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("superadmins")
}

// ADMIN PLAN PURCHASE (Temporary storage before hospital creation)
model AdminPlanPurchase {
  id        String   @id @default(uuid())
  adminId   String   @unique
  planId    String
  createdAt DateTime @default(now())

  admin     User             @relation(fields: [adminId], references: [id])
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("admin_plan_purchases")
}

// SUBSCRIPTION PLANS
model SubscriptionPlan {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  price         Float
  currency      String   @default("USD")
  billingCycle  String   @default("monthly") // monthly, yearly
  maxUsers      Int      @default(10)
  maxPatients   Int      @default(1000)
  features      Json     // Dynamic features
  status        String   @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions        Subscription[]
  adminPlanPurchases   AdminPlanPurchase[]

  @@map("subscription_plans")
}

// HOSPITAL
model Hospital {
  id             String   @id @default(uuid())
  name           String
  address        String?
  city           String?
  state          String?
  country        String?
  pincode        String?
  phone          String?
  email          String?  @unique
  website        String?
  licenseNumber  String?
  status         String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  subscription   Subscription?
  users          User[]
  patients       Patient[]
  inventory      Inventory[]
  invoices       Invoice[]
  departments    Department[]

  @@map("hospitals")
}

// SUBSCRIPTION
model Subscription {
  id         String             @id @default(uuid())
  hospitalId String             @unique
  planId     String
  startDate  DateTime
  endDate    DateTime
  status     SubscriptionStatus @default(ACTIVE)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  hospital   Hospital         @relation(fields: [hospitalId], references: [id])
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// DEPARTMENTS
model Department {
  id         String   @id @default(uuid())
  hospitalId String
  name       String
  code       String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  users      User[]

  @@unique([hospitalId, name])
  @@map("departments")
}

// USERS (Simplified - permissions handled in controllers)
model User {
  id           String   @id @default(uuid())
  hospitalId   String?
  departmentId String?
  name         String
  email        String   @unique
  password     String
  phone        String?
  role         Role
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  hospital     Hospital?    @relation(fields: [hospitalId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])

  // Temporary plan purchase before hospital creation
  adminPlanPurchase AdminPlanPurchase?

  // Role-specific profiles
  doctorProfile Doctor?
  nurseProfile  Nurse?
  staffProfile  Staff?
  labTechProfile LabTech?

  // Relations
  appointments Appointment[] @relation("DoctorAppointments")
  opdVisits    OPDVisit[]    @relation("DoctorOPDVisits")
  ipdRecords   IPDRecord[]   @relation("DoctorIPDRecords")
  labReports   LabReport[]   @relation("LabTechReports")
  createdInvoices Invoice[]  @relation("InvoiceCreator")

  @@map("users")
}

// PATIENT
model Patient {
  id            String    @id @default(uuid())
  hospitalId    String
  patientId     String    // Hospital specific patient ID
  name          String
  dob           DateTime?
  age           Int?
  gender        String?
  phone         String?
  email         String?
  address       String?
  emergencyContact String?
  bloodGroup    String?
  allergies     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  hospital      Hospital @relation(fields: [hospitalId], references: [id])

  appointments  Appointment[]
  opdVisits     OPDVisit[]
  ipdRecords    IPDRecord[]
  labReports    LabReport[]
  invoices      Invoice[]

  @@unique([hospitalId, patientId])
  @@map("patients")
}

// APPOINTMENTS
model Appointment {
  id         String            @id @default(uuid())
  patientId  String
  doctorId   String
  slotStart  DateTime
  slotEnd    DateTime?
  status     AppointmentStatus @default(PENDING)
  notes      String?
  reason     String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  patient    Patient  @relation(fields: [patientId], references: [id])
  doctor     User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  opdVisit   OPDVisit?

  @@map("appointments")
}

// OPD VISITS
model OPDVisit {
  id            String   @id @default(uuid())
  appointmentId String?  @unique
  patientId     String
  doctorId      String
  visitNotes    String?
  diagnosis     String?
  prescriptions Json?    // Structured prescription data
  vitals        Json?    // BP, temp, pulse, etc.
  followUpDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  patient       Patient      @relation(fields: [patientId], references: [id])
  doctor        User         @relation("DoctorOPDVisits", fields: [doctorId], references: [id])

  @@map("opd_visits")
}

// IPD RECORDS
model IPDRecord {
  id          String    @id @default(uuid())
  patientId   String
  doctorId    String
  ward        String?
  bed         String?
  admissionAt DateTime  @default(now())
  dischargeAt DateTime?
  notes       String?
  diagnosis   String?
  treatment   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  patient     Patient @relation(fields: [patientId], references: [id])
  doctor      User    @relation("DoctorIPDRecords", fields: [doctorId], references: [id])

  @@map("ipd_records")
}

// LAB REPORTS
model LabReport {
  id          String   @id @default(uuid())
  patientId   String
  labTechId   String?
  testCode    String
  testName    String
  result      String?
  unit        String?
  normalRange String?
  status      String   @default("pending")
  reportDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient     Patient @relation(fields: [patientId], references: [id])
  labTech     User?   @relation("LabTechReports", fields: [labTechId], references: [id])

  @@map("lab_reports")
}

// INVENTORY
model Inventory {
  id          String    @id @default(uuid())
  hospitalId  String
  itemCode    String
  itemName    String
  category    String?
  description String?
  quantity    Int       @default(0)
  unit        String?
  unitPrice   Float?
  reorderAt   Int?
  supplier    String?
  batchNo     String?
  expiryDate  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  hospital    Hospital @relation(fields: [hospitalId], references: [id])

  @@unique([hospitalId, itemCode])
  @@map("inventory")
}

// BILLING
model Invoice {
  id          String        @id @default(uuid())
  hospitalId  String
  patientId   String
  createdById String
  invoiceNo   String
  totalAmount Float
  discount    Float         @default(0)
  taxAmount   Float         @default(0)
  finalAmount Float
  status      InvoiceStatus @default(PENDING)
  issuedAt    DateTime      @default(now())
  dueDate     DateTime?
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  hospital    Hospital      @relation(fields: [hospitalId], references: [id])
  patient     Patient       @relation(fields: [patientId], references: [id])
  createdBy   User          @relation("InvoiceCreator", fields: [createdById], references: [id])
  items       InvoiceItem[]
  payments    Payment[]

  @@unique([hospitalId, invoiceNo])
  @@map("invoices")
}

model InvoiceItem {
  id          String       @id @default(uuid())
  invoiceId   String
  module      ChargeModule
  referenceId String?
  description String
  quantity    Int          @default(1)
  unitPrice   Float
  amount      Float
  createdAt   DateTime     @default(now())

  invoice     Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id            String        @id @default(uuid())
  invoiceId     String
  method        PaymentMethod
  amount        Float
  transactionId String?
  notes         String?
  paidAt        DateTime      @default(now())
  createdAt     DateTime      @default(now())

  invoice       Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// ROLE PROFILES
model Doctor {
  id           String  @id @default(uuid())
  userId       String  @unique
  specialty    String?
  qualification String?
  experience   Int?
  regNumber    String?
  consultationFee Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User @relation(fields: [userId], references: [id])

  @@map("doctors")
}

model Nurse {
  id        String   @id @default(uuid())
  userId    String   @unique
  ward      String?
  shift     String?
  licenseNo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])

  @@map("nurses")
}

model Staff {
  id        String   @id @default(uuid())
  userId    String   @unique
  position  String?
  salary    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])

  @@map("staff")
}

model LabTech {
  id        String   @id @default(uuid())
  userId    String   @unique
  section   String?
  licenseNo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])

  @@map("lab_techs")
}
